type Query {
    info: String!
    feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
    me: Customer!
}

type Feed {
    links: [Link!]!
    count: Int!
}

type Mutation {
    post(url: String!, description: String!): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    vote(linkId: ID!): Vote
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: Customer
    votes: [Vote!]!
}

type AuthPayload {
  token: String
  customer: Customer
}

type Customer {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Subscription {
    newLink: Link
    newVote: Vote
}

type Vote {
    id: ID!
    link: Link!
    customer: Customer!
}

input LinkOrderByInput {
    description: Sort
    url: Sort
    createdAt: Sort
}

enum Sort {
    asc
    desc
}